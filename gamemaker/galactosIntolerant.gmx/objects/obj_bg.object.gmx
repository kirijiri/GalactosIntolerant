<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// background music
snd = audio_play_sound(snd_bg, 10, true);
audio_sound_gain(snd, global.snd_music, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw orbits
draw_set_circle_precision(100);
for (i=0; i&lt;global.planet_count; ++i)
{
    draw_circle(obj_sun.x, obj_sun.y, global.sun_radius + global.orb_width * i, true);
}

// draw cardinals
cardinal_angle = 360/global.cardinal_count;
r = global.sun_radius + global.orb_width * (global.planet_count);
for (i=0; i&lt;global.cardinal_count; ++i)
{
    end_x = obj_sun.x + r * cos(degtorad(cardinal_angle*i));
    end_y = obj_sun.y + r * sin(degtorad(cardinal_angle*i));
    draw_line(obj_sun.x, obj_sun.y, end_x, end_y);
}

// highlight winning cardinal on win
if (global.win &amp;&amp; (global.align_count &gt;= global.win_condition_align_count)) 
{    
    cardinal = global.cardinal_count - global.win_cardinal;
    end_x = obj_sun.x + r * cos(degtorad(cardinal_angle*cardinal));
    end_y = obj_sun.y + r * sin(degtorad(cardinal_angle*cardinal));
    draw_line_width(obj_sun.x, obj_sun.y, end_x, end_y, 10);
    
    cardinal = global.cardinal_count-global.win_cardinal+(global.cardinal_count/2);
    end_x = obj_sun.x + r * cos(degtorad(cardinal_angle*cardinal));
    end_y = obj_sun.y + r * sin(degtorad(cardinal_angle*cardinal));
    draw_line_width(obj_sun.x, obj_sun.y, end_x, end_y, 10);
}

// draw todo title
/*
draw_set_colour(c_white);
draw_set_font(fnt_score1);
draw_text(50, 20, "Please align "+string(global.win_condition_align_count)+" planets!" );
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
