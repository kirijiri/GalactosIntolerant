<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// if using true randomising, set the gml option
if (global.true_randomise)
    randomize()

var i;
for (i = 0; i &lt; global.planet_count; i += 1)
{
    //-------------------------------------------- basic info
    planet = instance_create(0,0,obj_planet_base);
    planet.planet_id = i
    global.planets[i] = planet
    planet.rate = global.plnt_rates[i]             //speed of movement around ring
    planet.orbit = i                               // orbit ring
    planet.turn = 0                               // player turn counter
    planet.action_lock = false
    planet.turning = false
        
    //-------------------------------------------- starting positions - auto-win/random/line
    if (global.test_win)
        step = global.orb_step_arr[planet.orbit] - planet.rate
    else if (global.randomise_start)
        step = floor( random(global.orb_step_arr[planet.orbit]) )
    else
        step = 0;
    planet.step = step
    
    //-------------------------------------------- planet sprite
    planet.sprite_index = global.plnt_spr_arr[i]
    planet.image_xscale -= random_range(0.5, 0.2);
    planet.image_yscale = planet.image_xscale;
    
    //-------------------------------------------- planet movement
    planet.facing = 0                              // facing fo the arrows in radians
    planet.orbit_deg  = 0                          // the amount the planet nees to orbit
    planet.orbit_incr = 0                          // the increments per frame   
    planet.move_x = 0                              // x value for moving the planet (e.g, for swapping)
    planet.move_y = 0                              // y value for moving the planet (e.g, for swapping)
    planet.move_incr = 0
    planet.move_dist = 0 
    planet.day_cycle = global.plnt_dayCycle_arr[i] //speed of planet rotation
    planet.current_degrees = 0;                    // the current position around the sun in degrees
    planet.end_degrees = 0;                        

    //-------------------------------------------- planet game data
    planet.name = "";
    planet.size = "";
    planet.race = "";
    planet.population = 0;
    planet.follow = 0;
    planet.damspeedup = 0;
    planet.damspeeddown = 0;
    planet.damorbit1 = 0;
    planet.damorbit2 = 0;
    planet.damorbit3 = 0;
    planet.damorbit4 = 0;
    planet.damorbit5 = 0;
    planet.damorbit6 = 0;
    planet.wikitext = "";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
