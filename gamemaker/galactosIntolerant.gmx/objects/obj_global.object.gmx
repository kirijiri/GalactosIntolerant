<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//--------------------------------------------------GAME OPTNS

globalvar global.randomise_start = 1;   // start planets on random step
globalvar global.true_randomise = 1;    // use true random values
globalvar global.test_win = 0;          // starts the planets one move from winning

//--------------------------------------------------SCORE

globalvar global.start_score = 5710000000;
globalvar global.score = global.start_score;
globalvar global.likes_received = 0;
globalvar global.remaining_followers = 0;
globalvar global.remaining_population = 0;
globalvar global.death_toll = 0;
globalvar global.align_count = 0;
globalvar global.lost = 0;
globalvar global.win = 0;
globalvar global.win_cardinal = -1;

//--------------------------------------------------GLOBALS

globalvar global.turn = 0;
globalvar global.anim_time = 20;
globalvar global.offset_rotation = 90;
globalvar global.swap_from = -1;
globalvar global.swap_to = -1;
globalvar global.offset_x = 350;
globalvar global.offset_y = 0;
globalvar global.cardinal_count = 8;
globalvar global.cardinal_threshold = 0.10;
globalvar global.planet_count = 6;
globalvar global.win_condition_align_count = 3;

//--------------------------------------------------FILES

globalvar global.file_planet_data = working_directory+"GI_planetdatafin.txt";
globalvar global.file_message_data = working_directory+"GI_news.txt";

//--------------------------------------------------FLAGS

globalvar global.arrows_visible = 0;    // movement arrows visibility
globalvar global.turn_lock = 0;         // lock for turn
globalvar global.action_lock = 0;       // lock for actions
globalvar global.swap_mode = 0;         // lock for actions
globalvar global.konami = 0;            // ssssssh!

//--------------------------------------------------SOUND

globalvar global.snd_win_music = 50;
globalvar global.snd_music = 0.1;
globalvar global.snd_fx = 0.7;
globalvar global.snd_fx_arrows = 1;
globalvar global.snd_fx_skip = 1;

//--------------------------------------------------PLANETS

// rates
plnt_rates[0] = 3;
plnt_rates[1] = 5;
plnt_rates[2] = 7;
plnt_rates[3] = 9;
plnt_rates[4] = 11;
plnt_rates[5] = 14;
globalvar global.plnt_rates = plnt_rates;

// sprites
plnt_spr_arr[0] = spr_planet_00;
plnt_spr_arr[1] = spr_planet_01;
plnt_spr_arr[2] = spr_planet_02;
plnt_spr_arr[3] = spr_planet_03;
plnt_spr_arr[4] = spr_planet_04;
plnt_spr_arr[5] = spr_planet_05;
globalvar global.plnt_spr_arr = plnt_spr_arr;

// day cycles
plnt_dayCycle_arr[0] = 20;
plnt_dayCycle_arr[1] = 20;
plnt_dayCycle_arr[2] = 20;
plnt_dayCycle_arr[3] = 20;
plnt_dayCycle_arr[4] = 20;
plnt_dayCycle_arr[5] = 20;
globalvar global.plnt_dayCycle_arr = plnt_dayCycle_arr;

//--------------------------------------------------ORBITS

// orbit values
globalvar global.sun_radius = 100;
globalvar global.orb_width = 50;

// steps 
orb_step_arr[0] = global.cardinal_count;
orb_step_arr[1] = orb_step_arr[0]*2;
orb_step_arr[2] = orb_step_arr[1]*2;
orb_step_arr[3] = orb_step_arr[2]*2;
orb_step_arr[4] = orb_step_arr[3]*2;
orb_step_arr[5] = orb_step_arr[4]*2;
globalvar global.orb_step_arr = orb_step_arr;

// degree array
orbit_deg_arr[0] = 360/orb_step_arr[0];
orbit_deg_arr[1] = 360/orb_step_arr[1];
orbit_deg_arr[2] = 360/orb_step_arr[2];
orbit_deg_arr[3] = 360/orb_step_arr[3];
orbit_deg_arr[4] = 360/orb_step_arr[4];
orbit_deg_arr[5] = 360/orb_step_arr[5];
globalvar global.orbit_deg_arr = orbit_deg_arr;

//--------------------------------------------------ARROWS

// arrow sprites
spr_arrow_arr[0] = spr_left;
spr_arrow_arr[1] = spr_right;
spr_arrow_arr[2] = spr_up;
spr_arrow_arr[3] = spr_down;
globalvar global.spr_arrow_arr = spr_arrow_arr;

//--------------------------------------------------KONAMI CHEAT

konami_code[0] = "up";
konami_code[1] = "up";
konami_code[2] = "down";
konami_code[3] = "down";
konami_code[4] = "left";
konami_code[5] = "right";
konami_code[6] = "left";
konami_code[7] = "right";
konami_code[8] = "B";
konami_code[9] = "A";
konami_progress = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.konami == 1)
{
    global.konami = 0
}

// konami code to unlock instant win
if (konami_progress == 10)
{
    show_debug_message("I WIN BUTTON PRESSED");
    konami_progress = 0;
    global.konami = 1
}

if keyboard_check_pressed(vk_up)
{
    if (string("up") == string(konami_code[konami_progress]))
        konami_progress++;
    else
        konami_progress = 0;
}
if keyboard_check_pressed(vk_down)
{
    if (string("down") == string(konami_code[konami_progress]))
        konami_progress++;
    else
        konami_progress = 0;
}
if keyboard_check_pressed(vk_left)
{
    if (string("left") == string(konami_code[konami_progress]))
        konami_progress++;
}
if keyboard_check_pressed(vk_right)
{
    if (string("right") == string(konami_code[konami_progress]))
        konami_progress++;
    else
        konami_progress = 0;
}
if keyboard_check_pressed(ord('A'))
{
    if (string("A") == string(konami_code[konami_progress]))
        konami_progress++;
    else
        konami_progress = 0;
}
if keyboard_check_pressed(ord('B'))
{
    if (string("B") == string(konami_code[konami_progress]))
        konami_progress++;
    else
        konami_progress = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
